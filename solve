#include "graph.cpp"
#include <stdio.h>
#include <string.h>
long long int solve1()
{
	AdjGraph *G;
	long long int d[200];
	int vis[200]={0};
	int pre[200];
	int mind;
	memset(d,0x3f,sizeof(d));
	d[1]=0;
	for(int i=1;i<=G->n;i++)
	{
		long long int mind=INF;
		int u=0;
		for(int j=1;j<=n;j++)
		{
			if(vis[j]==0&&d[j]<mind)
			{
				mind=d[j];
				u=j;
			}
		}
		vis[u]=1;
		ArcNode *p=G->adjlist[u].firstarc;
		while(p!=NULL)
		{
			int v=p->adjvex;
			if(d[v]>d[u]+p->weight)
			{
				d[v]=d[u]+p->weight;
				pre[v]=u;
			}
			p=p->nextarc;
		}
	}
	return d[n];
}
void del(AdjGraph G,int v,int u)
{
	ArcNode *p=G->adjlist[u].firstarc->nextarc;
	ArcNode *pre=G->adjlist[u].firstarc;
	if(pre->adjvex==v)
	{
		G->adjlist[u].firstarc=G->adjlist[u].firstarc->nextarc;
	}else
	while(p!=NULL){
		if(p->adjvex==v)
		{
			pre->nextarc=p->nextarc;
			free(p);
			break;
		}
	}
}

int solve2()
{
	long long int best=solve1();
	long long int min=INF;
    for(int i=n;i>1;i=pre[i])
	{
		AdjGraph Gtmp;
		duan(G,i,pre[i]);
		int now=solve1(G);
		if(now<min&&now>best)
		{
			min=now;
		}	
	}
	return min;
}
